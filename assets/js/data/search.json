[
  
  {
    "title": "Learning about Jekyll",
    "url": "/posts/Learning-about-jekyll/",
    "categories": "",
    "tags": "",
    "date": "2023-10-27 21:37:12 +0100",
    





    
    "snippet": "Beginning the projectI’ve understood how websites work on the surface level since I was a teenager.At various times, I’ve started HTML documents and got them to display on a browser — simple text a...",
    "content": "Beginning the projectI’ve understood how websites work on the surface level since I was a teenager.At various times, I’ve started HTML documents and got them to display on a browser — simple text and images.But it still annoyed me that I couldn’t see how you’d jump from that to a shop page with reactive windows and custom animations.So after thinking about this from time to time, I finally decided to spend enough time learning how to build a site.The goal was/is a personal repository of past projects and some general information about myself.Starting SimpleAt first, I got interested in CSS.I was inspired by the work of Hyperplexed and tried to recreate some of their suggestions myself.My purpose was to get experience, and to achieve that I had to complete a small CSS task as presented, then try to modify it or add a personal element. More detail on how that went in the post about Playing with CSS.Discovering JekyllI talked to friends and took inspiration from other sites until I stumbled upon 11nty as a simple static site generator.It looked easy to learn, and it boasted performance.So I navigated to GitHub and started looking into hosting one of their GitHub pages.There I discovered that GitHub integrates well with Jekyll, and I would have to adjust many of their instructions to retrofit 11nty where Jekyll lived.So, since I haven’t spent any time in either static site generator, I ended up going with Jekyll.I don’t have the experience to be able to compare the two, although if I ever take up a new project, I might try 11nty so that I can see if I have an easier time getting started.Experimenting with ThemesPart of what attracted me to Jekyll is the available themes.I had spent time in the past making decisions on how I wanted my site to look.This took a lot of time I was willing to reinvest to port into Jekyll.However, GitHub showed that there are existing themes out there, and it was surprisingly easy to find a theme that was close enough to what I wanted to achieve.I ended up with the Chirpy theme and spent some time trying to migrate my existing first draft from the default theme to Chirpy.This led me to discover that Chirpy is using a newer version of Jekyll than GitHub-pages, and therefore the GitHub workflow that exists would not build properly.Although this was discouraging, I tried multiple ways of integrating Chirpy and automating the building and deployment of the site.I ended up with an approach where I would build the assets locally, and have a script to upload them to a separate branch, where the site lived.Even so, the implementation of the Chirpy theme wasn’t all there, and I was having configuration issues.So I bit the bullet, renamed and archived the repository, and started from scratch using the Chirpy template repository.It was a breath of fresh air.Customisation# Hierarchy of organisation for the site generatorJekyll # using Chirpy├── Liquid # Parser to configure Jekyll and the Chirpy theme│   ├── Rouge # CSS Styles configuration?│   └── Ruby # Builds the HTML/SCSS/Js assets└── kramdown # Converts MD documents to HTMLHaving set up the theme, I immediately realised that some of the changes I wanted to perform were non-modifiable unless the theme itself was edited.After I made all the modifications I wanted, I built the site locally instead of deploying it through GitHub.Then I uploaded it to its own branch.Now adding new posts doesn’t rely on anything besides markdown, so this procedure can be automated again.I did need to capture the changes, as updating the Gem theme file from Ruby would wipe them all.Other than that, the only other things I needed to tweak were the _config.yml, contact.yml, and  share.yml files, the names of the tabs, and the data in the assets folder."
  },
  
  {
    "title": "Playing with CSS",
    "url": "/posts/Playing-with-CSS/",
    "categories": "",
    "tags": "",
    "date": "2023-07-12 23:00:00 +0100",
    





    
    "snippet": "MotivationThe first instruction I was given on how to build a website by my Computer Science teacher when I was young, was to open a Word (2003) document.I was made to write basic HTML with &lt;hea...",
    "content": "MotivationThe first instruction I was given on how to build a website by my Computer Science teacher when I was young, was to open a Word (2003) document.I was made to write basic HTML with &lt;head&gt; and &lt;body&gt; information in said document, and save it as a .html file.As you can imagine, I hated the whole idea.It looked jarring and it felt like a ton of work to stylise any given element on the page.I couldn’t fathom that this was how websites were built.Thankfully they aren’t, but it did manage to dissuade me from trying to learn again for a long while.Eventually, I did want to learn how interesting effects were made, and after a quick internet search, I started looking into CSS.I wanted to stay away from javascript for two reasons: To see how far I could get with CSS alone, and to rest assured that I wouldn’t have to worry about loading scripts and the overhead they might add to the page.Approaching CSSThe advice I followed in choosing projects was “Find an element you like, and try to recreate it”.Having no real guidelines on methodology for CSS, I decided to try and replicate elements with known implementations in code.pen.In this way, I could work towards an end-goal, and get hints if I needed them.Choosing a variety of projects would expose me to different approaches to CSS as well.So to push my learning, I had also decided to make a meaningful modification to a project, once I’ve implemented it in its entirety.This would help me confirm that I’ve consolidated the knowledge I’ve learned during the project.ProjectsCard Edge HighlightA stylised card class that has a subtle hover effect on its side.Hovering over multiple cardsCurtain rise effectAn image splash screen with site navigation hidden behind a curtain.Curtain Rise TransitionCloud following the mouseAn effect on the cursor loading with the website and following any movement.Rotating, faded, and following the mouseTwitch cardA shimmer effect that was found on Twitch, for phones.Clunky text transition animation and control over the background dotsRotating ClockA silly clock 4320 times faster than a seconds clock.Multiplying the animation by that number would make it a 12h clock.A clock completing one rotation every 10 seconds"
  },
  
  {
    "title": "Simple CTF games",
    "url": "/posts/Simple-CTF-games/",
    "categories": "",
    "tags": "",
    "date": "2023-06-10 21:00:11 +0100",
    





    
    "snippet": "Adventures in CTF activitiesOnce in a while, I want a riddle or a puzzle to solve.Capture-the-flag challenges are always able to scratch this itch.So I’ll spend an afternoon going through an intere...",
    "content": "Adventures in CTF activitiesOnce in a while, I want a riddle or a puzzle to solve.Capture-the-flag challenges are always able to scratch this itch.So I’ll spend an afternoon going through an interesting challenge page that I found.Here are some examples:pwn.collegeAn interactive education platform for Arizona State University to complement its Cybersecurity and Computer Systems Security courses.Open to everyone, and accompanied by lectures, Q&amp;As, and a discord server.  This is an at-your-own-pace challenge set, while CTFs are usually time-restricted.OverTheWireCTF challenges over an SSH connection for the most part.Categorised from simplest to hardest on their site from the top down.Each flag is the password to use for the next SSH challenge.They are generated according to your user, so finding flags from other people is not going to help you advance.Great sources for infoThe data I have been gathering for these challenges came from:  zaratec.io  ctftime"
  },
  
  {
    "title": "A button for smart lights",
    "url": "/posts/A-button-for-smartlights/",
    "categories": "",
    "tags": "",
    "date": "2022-11-14 19:14:54 +0000",
    





    
    "snippet": "You can do two things when buying a knock-off product:  Understand that you might be getting something inferior and accept it.You did willingly spend less money, after all. If you don’t want to do ...",
    "content": "You can do two things when buying a knock-off product:  Understand that you might be getting something inferior and accept it.You did willingly spend less money, after all. If you don’t want to do that though…  You can turn it into a project — to create a (frankly overcomplicated) mess to cover up the inferiorities of the knock-off item you have purchased.Will the second approach cost more money than the original project?Almost certainly.Will it be a fun teaching experience?It was in this case.So I can at least live with the illusion that I’ve made good decisions for one more day.Smart lights - The ProblemThe smart lights I currently own are not the Philips ones that are more commonly expected when one talks about smart lights.Now there are many off-brand smart lights, and I didn’t spend time comparing differences.I bought what was at a reasonable price at the time, especially with the chip shortage crisis that meant that Philips lights were 2-3x their usual price.I said to myself I’d upgrade once the ones I got burned out.The problem was that these lights did not handle being disconnected from the network gracefully.If they couldn’t find a connection, they would go into their default reconnection mode.That would have been fine if that mode wasn’t to flash the brightest white light once a second.The upshot of this was that the physical light switch became practically useless, and I would have to control my lights exclusively through my phone.This is because the physical light switch cuts the wifi connection from the bulbs and they go into reconnection mode immediately as they come back up instead of looking for the network first.The SolutionThe app to control the lights has a turn-off function.Invoking that would be good enough.I just had to figure out a way to translate the function call from the app, into a physical switch on my wall.It seemed simple enough at the time, and in retrospect it is, just the approach could be more elegant.But this was supposed to be a quick project, so the first (bodgy) solution is the final one, to match the quality of the original product.The Parts  IFTTT - Handles applet requests using WebHooks.  SmartLife API - The app used by the lights manufacturer.  ESP8266 NodeMCU - The (last) microcontroller used for the button control.The PrototypesOf all the items I needed, the only thing I didn’t have in hand was a Wi-Fi module.I already had an Arduino, so I thought I could get a standalone Wi-Fi module for the ESP8266, and that would have been enough to help me implement everything.Having gotten the module, and wiring it up to the Arduino, I realised that I could not get it to make a POST request with an established library.There was an Arduino library that I used to control the Webhooks, but there was nothing that could send the request to the ESP82266 module.Instead, any commands to the module would have to be converted to AT commands.Another thing that came to light was that the combination of the Arduino and the breadboard with the module would make for a clunky and large button interface.What could use my Webhooks code, however, was the ESP8366 NodeMCU which is an MCU with the module installed on it and in a much smaller package as well.The good news was that I could redevelop the code at this point in advance of the MCU appearing after I bought it.Since all the prototyping was almost complete I moved on to veroboard, soldered everything in place to its small form factor and awaited for the NodeMCU to arrive.Version 2 of the system involved unpacking the MCU, plugging it in, and programming it with the code.A brief code snippet with the logic is summarised below, while the whole program can be found on Git Hub.  //Initialise and connect to Wifi  button.setDebounceTime(50);  Serial.begin(115200);  pinMode(LED_BUILTIN, OUTPUT);  digitalWrite(LED_BUILTIN, LOW);  WiFi.mode(WIFI_STA);  WiFi.disconnect();  delay(1000);  ...  void loop{  button.loop();  if(button.isPressed()){    //Update the button state    //Trigger off or on webhook based on the state    }  }Product ManagementThe hackiest of equipment can look professional if the box is well-designed.I gather more evidence to confirm this claim, the more I investigate electronics by taking them apart.So naturally, to finalise this project I needed a nice box.This was a fun couple of hours in Solidworks, then exporting to STL files and 3D-printing using Ultimaker Cura.First I made the bottom case with slots for the USB cable and holders for the header pins.I managed to make them tight enough that the Veroboard was essentially held in place by the groves and didn’t need any other fixtures.I didn’t quite get the four corners right where the bottom and top case parts would clip onto each other.I had to adjust and print a couple of versions until I was happy with it.The bottom part of the caseThe top part was fairly straightforward and only required two prints to get right.The hole for the button was just too tight by 1mm, so I had to increase the radius to make it less snug.Top part of the caseOutcomeOverall I’m happy with the final box after adding some extra decoration and a command strip to hold it in place.Now so long as the wall plug is on, I can physically press a button for my lights again.I still end up using the app more, but once in a while, it’s just much faster to hit a switch."
  },
  
  {
    "title": "A sign made from LEDs",
    "url": "/posts/A-static-LED-board/",
    "categories": "",
    "tags": "",
    "date": "2022-11-11 19:14:54 +0000",
    





    
    "snippet": "To be populatedThe LED sign",
    "content": "To be populatedThe LED sign"
  },
  
  {
    "title": "ChipWhisperer experimentation",
    "url": "/posts/ChipWhisperer-Experimentation/",
    "categories": "",
    "tags": "",
    "date": "2022-02-15 18:30:00 +0000",
    





    
    "snippet": "To be populated",
    "content": "To be populated"
  }
  
]

